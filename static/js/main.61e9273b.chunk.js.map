{"version":3,"sources":["components/WeatherFetching.js","App.js","serviceWorker.js","index.js"],"names":["api","WeatherFetching","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","value","onChange","e","target","onKeyPress","key","fetch","then","res","json","data","console","log","name","sys","country","d","day","getDay","month","getMonth","year","getFullYear","numero","getDate","dateBuilder","Date","Math","round","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAGMA,G,MACC,oCADDA,EAEE,0CA8FOC,MA3Ff,WAA4B,IAAD,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,OAEKF,mBAAS,IAFd,mBAElBG,EAFkB,KAETC,EAFS,KAiDzB,OACE,yBACEC,UACyB,oBAAhBF,EAAQG,MACXH,EAAQG,KAAKC,KAAO,GAClB,WAEF,OAGN,8BACE,yBAAKF,UAAU,cACb,2BACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAASU,EAAEC,OAAOH,QACnCI,WA/DK,SAACF,GACA,UAAVA,EAAEG,KACJC,MAAM,GAAD,OAAIlB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDmB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLlB,EAAS,IACTE,EAAWgB,GACXC,QAAQC,IAAIF,UA2DU,oBAAhBjB,EAAQG,KACd,6BACE,yBAAKD,UAAU,gBACb,yBAAKA,UAAU,YACZF,EAAQoB,KADX,KACmBpB,EAAQqB,IAAIC,SAE/B,yBAAKpB,UAAU,QA5DP,SAACqB,GACnB,IAwBIC,EAVO,CACT,WACA,QACA,QACA,WACA,QACA,WACA,UAGaD,EAAEE,UACbC,EAzBS,CACX,UACA,aACA,OACA,QACA,MACA,OACA,UACA,UACA,YACA,UACA,WACA,YAaiBH,EAAEI,YACjBC,EAAOL,EAAEM,cACTC,EAASP,EAAEQ,UAEf,MAAM,GAAN,OAAUP,EAAV,YAAiBM,EAAjB,YAA2BJ,EAA3B,YAAoCE,GA8BHI,CAAY,IAAIC,QAEzC,yBAAK/B,UAAU,eACb,yBAAKA,UAAU,QAAQgC,KAAKC,MAAMnC,EAAQG,KAAKC,MAA/C,SACA,yBAAKF,UAAU,WAAWF,EAAQA,QAAQ,GAAGG,QAIjD,MChFKiC,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,QCKcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.61e9273b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './style/weather.scss'\r\n\r\nconst api = {\r\n  key: 'c748e4424974c74ae32808a81e600eb8',\r\n  base: 'http://api.openweathermap.org/data/2.5/',\r\n}\r\n\r\nfunction WeatherFetching() {\r\n  const [query, setQuery] = useState('')\r\n  const [weather, setWeather] = useState({})\r\n\r\n  const search = (e) => {\r\n    if (e.key === 'Enter') {\r\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setQuery('')\r\n          setWeather(data)\r\n          console.log(data)\r\n        })\r\n    }\r\n  }\r\n\r\n  const dateBuilder = (d) => {\r\n    let months = [\r\n      'Janvier',\r\n      'Février',\r\n      'Mars',\r\n      'Avril',\r\n      'Mai',\r\n      'Juin',\r\n      'Juillet',\r\n      'Août',\r\n      'Septembre',\r\n      'Octobre',\r\n      'Novembre',\r\n      'December',\r\n    ]\r\n    let days = [\r\n      'Dimanche',\r\n      'Lundi',\r\n      'Mardi',\r\n      'Mercredi',\r\n      'Jeudi',\r\n      'Vendredi',\r\n      'Samedi',\r\n    ]\r\n\r\n    let day = days[d.getDay()]\r\n    let month = months[d.getMonth()]\r\n    let year = d.getFullYear()\r\n    let numero = d.getDate()\r\n\r\n    return `${day} ${numero} ${month} ${year}`\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        typeof weather.main != 'undefined'\r\n          ? weather.main.temp > 15\r\n            ? 'App warm'\r\n            : 'App'\r\n          : 'App'\r\n      }\r\n    >\r\n      <main>\r\n        <div className='search-box'>\r\n          <input\r\n            type='text'\r\n            className='search-bar'\r\n            placeholder='Search...'\r\n            value={query}\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            onKeyPress={search}\r\n          />\r\n        </div>\r\n        {typeof weather.main != 'undefined' ? (\r\n          <div>\r\n            <div className='location-box'>\r\n              <div className='location'>\r\n                {weather.name}, {weather.sys.country}\r\n              </div>\r\n              <div className='date'>{dateBuilder(new Date())}</div>\r\n            </div>\r\n            <div className='weather-box'>\r\n              <div className='temp'>{Math.round(weather.main.temp)}°C</div>\r\n              <div className='weather'>{weather.weather[0].main}</div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WeatherFetching\r\n","import React from 'react'\nimport './App.scss'\nimport WeatherFetching from './components/WeatherFetching'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <WeatherFetching />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}